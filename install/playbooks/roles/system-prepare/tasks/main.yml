---

# Install the most required packages
- name: Update packages cache
  tags: apt
  apt:
    cache_valid_time: 3600
    update_cache: true

- name: Install common packages
  tags: apt
  apt:
    name: "{{ pkg }}"
    state: present
  with_items:
    - ufw
    - rsync
    - makepasswd
    - haveged             # speed up password generation
    - nginx
    - acl
  loop_control:
    loop_var: pkg

# Install the most required packages
- name: Install certbot
  when: system.ssl == 'letsencrypt'
  tags: apt
  apt:
    name: certbot
    state: present

- name: Make sure letsencrypt directory exists
  file:
    path: '{{ path }}'
    state: directory
    mode: 0750
  with_items:
    - /etc/letsencrypt/archive
    - /etc/letsencrypt/live
  loop_control:
    loop_var: path

- name: Create a homebox directory to store any specific configuration
  file:
    path: /etc/homebox
    state: directory
    mode: 0755

- name: Create a homebox directory to store any specific configuration
  tags: backup
  template:
    src: backup-exclude
    dest: /etc/homebox/backup-exclude

# Update packages cache, and install any security update
- name: Update packages cache and install security updates
  register: packages_cache
  tags: apt
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Upgrade the distribution, and install security updates if needed
  when: packages_cache.changed
  tags: apt
  apt:
    upgrade: yes

# We are going to install the "unattended-upgrades" package, and to
# configure it to install security updates automatically.
- name: Configure the automatic security updates
  tags: security
  debconf:
    name: unattended-upgrades
    question: '{{ conf.question }}'
    value: '{{ conf.value }}'
    vtype: '{{ conf.type }}'
  with_items:
    - question: unattended-upgrades/origins_pattern
      value: 'origin=Debian,codename=${distro_codename},label=Debian-Security'
      type: string
    - question: unattended-upgrades/enable_auto_updates
      value: '{{ security.auto_update }}'
      type: boolean
  loop_control:
    loop_var: conf

# Install the firewall, but do not configure any rule.
# The other tasks will setup the rules themselves
# We are also installing fail2ban, so the other services might use it, like postfix, dovecot and roundcube
# The package 'unattended-upgrades' download and install security updates by default

- name: Install ufw / fail2ban and automatic security updates
  tags: security
  apt:
    name: "{{ pkg }}"
    state: present
  with_items:
    - '{{ defaults.packages }}'
  loop_control:
    loop_var: pkg

- name: Install AppArmor packages
  when: security.app_armor
  tags: security
  apt:
    name: '{{ pkg }}'
    state: latest
  with_items:
    - apparmor
    - apparmor-profiles
    - apparmor-utils
  loop_control:
    loop_var: pkg

- name: Enable AppArmor at boot
  register: grub_config
  when: security.app_armor
  tags: security
  replace:
    path: /etc/default/grub
    regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="([^"]*)"'
    replace: 'GRUB_CMDLINE_LINUX_DEFAULT="\1 apparmor=1 security=apparmor"'

# AppArmor will be enabled on the next reboot
- name: Update grub
  when: grub_config.changed
  command: update-grub2

- name: Enable AppArmor service
  when: security.app_armor
  tags: security
  service:
    name: apparmor
    enabled: true

- name: Check if AppArmor is enabled
  register: aa_enabled
  when: security.app_armor
  tags: security
  shell: aa-enabled
  failed_when: false

- name: Reboot to activate AppArmor if not already active
  when: security.app_armor and aa_enabled.rc == 1
  tags: security, apparmor
  shell: systemctl reboot --message "Restarting the system to activate AppArmor"
  async: 1
  poll: 0

- name: Wait for the server to come back online
  when: security.app_armor and aa_enabled.rc == 1
  tags: security
  local_action:
    module: wait_for_connection
    host: '{{ ansible_ssh_host }}'
    port: 22
    state: started
    delay: 30
    sleep: 10
    timeout: 180

- name: Create a random password for file encryption on the server
  tags: encryption
  set_fact:
    system_key: '{{ lookup("password", "{{ encryption.systemKeyParams }}") }}'

- name: Create a passphrase to encrypt system files
  tags: encryption
  template:
    src: system-key
    dest: /etc/homebox/system-key
    owner: root
    group: root
    mode: '0400'

- name: Install the dictionnaries
  tags: lang
  apt:
    name: 'aspell-{{ dict.id }}'
    state: present
  with_items: '{{ dictionaries }}'
  loop_control:
    loop_var: dict

- name: Create a composition directory for bind
  when: bind.install
  tags: bind
  file:
    path: /etc/homebox/dns-entries.d/
    state: directory

# SSHFP (fingerprints) are only active with DNSSEC
- name: Create the SSHFP records for bind
  when: bind.install and bind.dnssec.active
  tags: bind
  register: ssh_keygen
  shell: >-
    ssh-keygen -r {{ network.domain }} | sed 's/ /. /'

- name: Add the SSHFP records
  when: bind.install and bind.dnssec.active
  tags: bind
  template:
    src: sshfp.bind
    dest: /etc/homebox/dns-entries.d/01-sshfp.bind

---

# This seems to happen with some cloud providers, the first time the server boots
# Wait until no one locks the dpkg / apt loc file
- name: Wait for apt to be unlocked
  tags: apt
  register: result
  retries: 9
  delay: 5
  shell: >-
    test -f /var/lib/dpkg/lock &&
    ls -l /proc/*/fd/* 2>/dev/null | grep '/var/lib/dpkg/lock' ;
    echo
  until: result.stdout == ''

# Install the most required packages
- name: Update packages cache if older than 1h
  tags: apt
  apt:
    cache_valid_time: 3600
    update_cache: true

# Install swap if not enough memory available
- name: Install memory swap package
  when: ansible_memtotal_mb < 2048
  apt:
    name: dphys-swapfile
    state: latest

- name: Upgrade the distribution
  tags: apt
  apt:
    upgrade: true

- name: Install required packages
  tags: apt
  apt:
    name: "{{ system_required }}"
    state: present

- name: Remove packages to exclude
  tags: apt
  apt:
    name: "{{ system_excluded }}"
    state: absent

- name: Make sure letsencrypt directory exists
  file:
    path: '{{ path }}'
    state: directory
    mode: 0750
  with_items:
    - /etc/letsencrypt/archive
    - /etc/letsencrypt/live
  loop_control:
    loop_var: path

- name: Create a homebox directory to store any specific configuration
  file:
    path: /etc/homebox
    state: directory
    mode: 0755

- name: Create the configuration file that defines paths to exclude for backup
  tags: backup
  template:
    src: backup-exclude
    dest: /etc/homebox/backup-exclude

- name: Create the main configuration file for other services
  tags: config
  template:
    src: main.cf
    dest: /etc/homebox/main.cf

# Update packages cache, and install any security update
- name: Update packages cache and install security updates
  register: packages_cache
  tags: apt
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Upgrade the distribution, and install security updates if needed
  when: packages_cache.changed
  tags: apt
  apt:
    upgrade: yes

# We are going to install the "unattended-upgrades" package, and to
# configure it to install security updates automatically.
- name: Configure the automatic security updates
  tags: security
  debconf:
    name: unattended-upgrades
    question: '{{ conf.question }}'
    value: '{{ conf.value }}'
    vtype: '{{ conf.type }}'
  with_items:
    - question: unattended-upgrades/origins_pattern
      value: 'origin=Debian,codename=${distro_codename},label=Debian-Security'
      type: string
    - question: unattended-upgrades/enable_auto_updates
      value: '{{ security.auto_update | ternary("true", "false") }}'
      type: boolean
  loop_control:
    loop_var: conf

- name: Get the locale value on the current machine
  tags: locale
  delegate_to: localhost
  set_fact:
    locale: "{{ lookup('env','LANG') }}"

# We are going to install the "unattended-upgrades" package, and to
# configure it to install security updates automatically.
- name: Configure locales
  tags: locale
  debconf:
    name: locales
    question: '{{ conf.question }}'
    value: '{{ conf.value }}'
    vtype: '{{ conf.type }}'
  with_items:
    - question: locales/locales_to_be_generated
      value: '{{ locale }}'
      type: multiselect
    - question: locales/default_environment_locale
      value: '{{ locale }}'
      type: boolean
  loop_control:
    loop_var: conf

- name: Update /etc/locales
  tags: locale
  replace:
    path: /etc/locale.gen
    regexp: '^# {{ locale | regex_replace("\.", "\\.") }}'
    replace: '{{ locale }}'

- name: Configure locales
  tags: locale
  shell: dpkg-reconfigure -phigh locales

# Install the firewall, but do not configure any rule.
# The other tasks will setup the rules themselves
# We are also installing fail2ban, so the other services might use it, like postfix, dovecot and roundcube
# The package 'unattended-upgrades' download and install security updates by default

- name: Install AppArmor packages
  tags: security
  vars:
    pkgs:
      - apparmor
      - apparmor-profiles
      - apparmor-utils
  apt:
    name: '{{ pkgs }}'
    state: latest

- name: Configure grub to add apparmor by default on boot
  register: grub_config
  tags: security
  lineinfile:
    path: /etc/default/grub
    backrefs: true
    regexp: 'GRUB_CMDLINE_LINUX_DEFAULT="(?!apparmor=1 security=apparmor)(.*)"'
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="apparmor=1 security=apparmor \1"'
    state: present

# AppArmor will be enabled on the next reboot
- name: Update grub
  when: grub_config.changed
  command: update-grub2

- name: Enable AppArmor service
  tags: security
  service:
    name: apparmor
    enabled: true

- name: Check if AppArmor is enabled
  register: aa_enabled
  tags: security
  shell: aa-enabled
  failed_when: false
  changed_when: false

- name: Reboot to activate AppArmor if not already active
  when: aa_enabled.rc == 1
  tags: security, apparmor
  shell: >-
    sleep 2 &&
    systemctl reboot --message
    "Restarting the system to activate AppArmor"
  async: 60
  poll: 0
  ignore_errors: true

- name: Wait for the server to come back online
  when: aa_enabled.rc == 1
  tags: security
  local_action:
    module: wait_for_connection
    delay: 30
    sleep: 10
    timeout: '{{ system.reboot_timeout }}'

- name: Create a random password for file encryption on the server
  tags: encryption
  no_log: true
  set_fact:
    system_key: '{{ lookup("password", "{{ encryption.systemKeyParams }}") }}'

- name: Create a passphrase to encrypt system files
  tags: encryption
  template:
    src: system-key
    dest: /etc/homebox/system-key
    owner: root
    group: root
    mode: '0400'

- name: Install the dictionnaries
  tags: lang
  apt:
    name: 'aspell-{{ dict.id }}'
    state: present
  with_items: '{{ dictionaries }}'
  loop_control:
    loop_var: dict

- name: Create a composition directory for bind
  when: bind.install
  tags: bind
  file:
    path: /etc/homebox/dns-entries.d/
    state: directory

# If IPv6 is not needed, disable it entirely
- name: Disable IPv6 if not needed
  sysctl:
    name: '{{ entry_name }}'
    value: '{{ 0 if ipv6_used else 1 }}'
  with_items:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
  loop_control:
    loop_var: entry_name

# SSHFP (fingerprints) are only active with DNSSEC
- name: Create the SSHFP records for bind
  when: bind.install and bind.dnssec.active
  tags: bind
  register: ssh_keygen
  changed_when: false
  shell: >-
    ssh-keygen -r {{ network.domain }} | sed 's/ /. /'

- name: Add the SSHFP records
  when: bind.install and bind.dnssec.active
  tags: bind
  template:
    src: sshfp.bind
    dest: /etc/homebox/dns-entries.d/01-sshfp.bind

# LUKS management
- name: Install Yubikey key decryption
  tags: luks
  when: security.luks.yubikey
  apt:
    name: yubikey-luks
    state: present

- name: Add a script to register the Yubikey
  tags: luks
  copy:
    src: yubikey-enroll.sh
    dest: /usr/local/sbin/yubikey-enroll.sh
    mode: 0700

- name: Activate some aliases in bashrc
  template:
    src: bashrc
    dest: /root/.bashrc

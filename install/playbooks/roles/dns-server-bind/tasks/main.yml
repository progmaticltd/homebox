---

- name: Create a directory for DNSSEC keys backup if it does not exists
  tags: cert
  delegate_to: localhost
  file:
    path: '{{ backup_directory }}/dnssec-keys/'
    state: directory

# When IPv6 is used, bind9 should be taken from backports
- name: Install the required packages
  apt:
    name: '{{ bind_packages }}'
    state: present
    default_release: '{{ ipv6_used | ternary("stretch-backports", "stretch") }}'

- name: Stop the DNS server before creating the configuration
  service:
    name: bind9
    state: stopped

- name: Build main and reverse IP address information
  include_tasks: build-ip-info.yml

- name: Copy the configuration template
  tags: config
  vars:
    serial: "{{ lookup('pipe', 'date +%s') }}"
    record_name: main
    reverse_ip_address: '{{ reverse_ip }}'
    external_ip_address: '{{ external_ip }}'
    ip_type: '{{ external_ip_type }}'
    ptr_id: 10
  template:
    src: '{{ file.src }}'
    dest: '{{ file.dest }}'
    mode: '{{ file.mode | default("0640") }}'
  with_items:
    - src: forward-head
      dest: '/etc/homebox/dns-entries.d/00-head.bind'
    - src: named.conf.options
      dest: '/etc/bind/named.conf.options'
      mode: '0640'
    - src: named.conf.local
      dest: '/etc/bind/named.conf.local'
      mode: '0640'
    - src: reverse-domain
      dest: '/etc/bind/reverse-main.{{ network.domain }}'
      mode: '0640'
    - src: forward-tail
      dest: '/etc/homebox/dns-entries.d/99-tail.bind'
  loop_control:
    loop_var: file

- name: Copy the configuration template
  when: backup_ip is defined and backup_ip != ""
  tags: config
  vars:
    serial: "{{ lookup('pipe', 'date +%s') }}"
    record_name: backup
    reverse_ip_address: '{{ reverse_backup_ip }}'
    external_ip_address: '{{ backup_ip }}'
    ip_type: '{{ backup_ip_type }}'
    ptr_id: 20
  template:
    src: '{{ file.src }}'
    dest: '{{ file.dest }}'
  with_items:
    - src: reverse-domain
      dest: '/etc/bind/reverse-backup.{{ network.domain }}'
  loop_control:
    loop_var: file

- name: Build the final bind configuration
  tags: config
  assemble:
    src: '/etc/homebox/dns-entries.d/'
    dest: '/etc/bind/forward.{{ network.domain }}'
    delimiter: '\n'
    regexp: '^.*\.bind$'

- name: Create the folder for the keys
  when: bind.dnssec.active
  register: keys_dir
  tags: encryption
  file:
    path: '{{ path }}'
    state: directory
    mode: '0755'
    owner: root
    group: bind
  with_items:
    - /etc/bind/keys
    - /etc/bind/keys/live
  loop_control:
    loop_var: path

- name: Create the loging directory
  file:
    path: /var/log/named/
    state: directory
    mode: '0755'
    owner: bind
    group: bind

- name: If the DNSSEC keys have been generated before, copy them on the remote server
  when: bind.dnssec.active
  tags: backup-push
  synchronize:
    src: '{{ backup_directory }}/dnssec-keys/'
    dest: '/etc/bind/keys/'
    mode: push
    owner: no
    group: no
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--checksum'
      - '--ignore-existing'
      - '--update'

- name: Make sure the ZSK file is linked in the live directory
  when: bind.dnssec.active
  shell: >-
    ls /etc/bind/keys/*key
    && ( grep -l "zone-signing key" /etc/bind/keys/*key
    | xargs -I {} ln -nsf {} live/zsk.key )
    || /bin/true
  args:
    chdir: /etc/bind/keys
    creates: /etc/bind/keys/live/zsk.key

- name: Generate the zone signing key (ZSK)
  when: bind.dnssec.active
  shell: >-
    ( test -f /etc/bind/keys/*key && grep "zone-signing key" /etc/bind/keys/*key )
    || dnssec-keygen -q -a {{ bind.dnssec.algo }} -b 1024 {{ network.domain }}
    | xargs -I {} ln -s /etc/bind/keys/{}.key live/zsk.key
  args:
    chdir: /etc/bind/keys
    creates: /etc/bind/keys/live/zsk.key

- name: Make sure the KSK file is linked in the live directory
  when: bind.dnssec.active
  shell: >-
    ls /etc/bind/keys/*key
    && ( grep -l "key-signing key" /etc/bind/keys/*key
    | xargs -I {} ln -nsf {} live/ksk.key )
    || /bin/true
  args:
    chdir: /etc/bind/keys
    creates: /etc/bind/keys/live/ksk.key

- name: Generate the key signing key (KSK)
  when: bind.dnssec.active
  tags: encryption
  shell: >-
    ( test -f /etc/bind/keys/*key && grep "key-signing key" /etc/bind/keys/*key )
    || dnssec-keygen -q -a {{ bind.dnssec.algo }} -f KSK -b 2048 {{ network.domain }}
    | xargs -I {} ln -s /etc/bind/keys/{}.key live/ksk.key
  args:
    chdir: /etc/bind/keys
    creates: /etc/bind/keys/live/ksk.key

- name: Set the permissions on the key and private key files
  when: bind.dnssec.active
  shell: >-
    chgrp bind /etc/bind/keys/*
    && chmod g+r /etc/bind/keys/*
  args:
    warn: false

- name: Create a key authority for local testing
  when: bind.dnssec.active
  shell: >-
    cat /etc/bind/keys/live/ksk.key
    | sed '/^;/d'
    | sed 's/IN DNSKEY 257 3 8 /257 3 8 "/'
    | sed 's/^/trusted-keys { /'
    | sed 's/$/"; };/'
    > /etc/bind/keys/live/authority.key
  args:
    creates: /etc/bind/keys/live/authority.key

- name: Allow queries to the DNS server
  ufw:
    from_ip: any
    to_ip: any
    proto: udp
    to_port: 53
    comment: 'Allow DNS queries'
    rule: allow

- name: Allow DNS zones transfer
  ufw:
    from_ip: any
    to_ip: any
    proto: tcp
    to_port: 53
    comment: 'Allow DNS zone transfers'
    rule: allow

- name: Allow DNS zones transfer (out)
  ufw:
    direction: out
    from_ip: any
    to_ip: any
    proto: tcp
    to_port: 53
    comment: 'Allow DNS zone transfers'
    rule: allow

- name: Copy DNS entries in bind cache directory (main IP)
  copy:
    src: '/etc/bind/{{ file }}'
    dest: '/var/cache/bind/{{ file }}'
    owner: bind
    group: bind
    remote_src: true
  with_items:
    - 'forward.{{ network.domain }}'
    - 'reverse-main.{{ network.domain }}'
  loop_control:
    loop_var: file

- name: Copy DNS entries in bind cache directory (backup IP)
  when: backup_ip is defined and backup_ip != ""
  copy:
    src: '/etc/bind/{{ file }}'
    dest: '/var/cache/bind/{{ file }}'
    owner: bind
    group: bind
    remote_src: true
  with_items:
    - 'reverse-backup.{{ network.domain }}'
  loop_control:
    loop_var: file

- name: Restart bind
  service:
    name: bind9
    state: started

- name: Ensure the main record resolves to me
  tags: hosts
  lineinfile:
    path: /etc/hosts
    line: '127.0.0.1    main.{{ network.domain }}'

- name: Ensure the backup record resolves to me
  when: backup_ip is defined and backup_ip != ""
  tags: hosts
  lineinfile:
    path: /etc/hosts
    line: '127.0.0.1    backup.{{ network.domain }}'

- name: Backup the keys on your local machine
  when: bind.dnssec.active
  tags: backup-pull
  synchronize:
    mode: pull
    src: '/etc/bind/keys/{{ item }}'
    dest: '{{ backup_directory }}/dnssec-keys/'
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--exclude=readme.md'
      - '--update'
  with_items:
    - '*.key'
    - '*.private'

# Add extra records ===========================================================
- name: Add extra records
  when: bind.extra_records != []
  template:
    src: extra-records.conf
    dest: /etc/homebox/dns-entries.d/90-extra-records.bind

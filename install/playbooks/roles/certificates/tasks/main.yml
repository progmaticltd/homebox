---

- name: Create a directory for certificates backup if it does not exists
  tags: cert
  delegate_to: localhost
  file:
    path: '{{ backup_directory }}/certificates/'
    state: directory
    mode: '0700'

# The "--ignore-existing" option skip the files already existing,
# especially the symbolic links in the live folder
# The '--update' option make sure to not overwrite new certificates.
- name: If the certificates have been generated before, copy them on the remote server
  when: (system.devel and devel.acme_server == 'staging') or system.keep_certs
  tags: cert,sync
  synchronize:
    src: '{{ backup_directory }}/certificates/'
    dest: /etc
    owner: no
    group: no
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--exclude=readme.md'
      - '--exclude=renewal-hooks'
      - '--ignore-existing'
      - '--update'
      - '--chmod=D0755,F0600'

- name: Use the default domain name for FQDN
  when: certificate.type == '@'
  tags: cert, facts
  set_fact:
    certificate_fqdn: "{{ network.domain }}"
    site_root: "/var/www/default"
    redirect_to_https: "{{ redirect | default(false) }}"
    domain_alias: "{{ certificate.domain_alias | default(None) }}"

- name: Create the certificate fqdn with the subdomain
  when: certificate.type != '@'
  tags: cert, facts
  set_fact:
    certificate_fqdn: "{{ certificate.type }}.{{ network.domain }}"
    site_root: "/var/www/{{ certificate.type }}"
    redirect_to_https: "{{ redirect | default(false) }}"
    domain_alias: "{{ certificate.domain_alias | default(None) }}"

- name: Create a directory for the site if it does not exists
  tags: cert
  file:
    path: "{{ site_root }}/.well-known/acme-challenge/"
    state: directory

- name: Create a simple nginx template site (if not exists)
  tags: nginx
  template:
    src: nginx-cert.conf
    dest: "/etc/nginx/sites-available/{{ certificate_fqdn }}-cert.conf"

- name: Make sure the site is enabled
  tags: nginx
  file:
    src: "/etc/nginx/sites-available/{{ certificate_fqdn }}-cert.conf"
    dest: "/etc/nginx/sites-enabled/{{ certificate_fqdn }}-cert.conf"
    state: link

# AppArmor configuration ======================================================

- name: Install web site AppArmor profile
  tags: security, apparmor
  template:
    src: apparmor-cert.conf
    dest: "/etc/apparmor.d/local/nginx-{{ certificate_fqdn }}"

- name: Check if AppArmor nginx configuration already contains the line
  register: line_found
  tags: facts, apparmor
  shell: >-
    grep -c 'include <local/nginx-{{ certificate_fqdn }}>'
    /etc/apparmor.d/usr.sbin.nginx
  changed_when: false
  failed_when: false

- name: Add website AppArmor specific configuration
  when: line_found.stdout == '0'
  register: aa_config
  tags: security, apparmor
  lineinfile:
    path: /etc/apparmor.d/usr.sbin.nginx
    line: '  #include <local/nginx-{{ certificate_fqdn }}>'
    insertbefore: '# End of local includes for homebox'

- name: Activate AppArmor profiles
  when: aa_config.changed
  tags: security, apparmor
  command: 'aa-enforce usr.sbin.nginx'

- name: Restart the nginx server to load the new configuration
  when: aa_config is defined and aa_config.changed
  tags: cert, nginx
  service:
    name: nginx
    state: restarted

# End of appArmor configuration ===============================================

- name: Create the folder for renewal hooks
  file:
    path: /etc/letsencrypt/renewal-hooks/deploy
    state: directory

- name: Install the certificate renewal hook
  tags: script
  copy:
    src: renewal-hook.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/00-base.sh
    mode: '0755'

- name: Check if the certificate already exists and is valid
  tags: cert
  register: is_valid
  changed_when: false
  shell: >-
    set -o pipefail ;
    certbot certificates -d {{ certificate_fqdn }} 2>&1
    | grep -c '(VALID:'
  args:
    executable: /bin/bash
  failed_when: false

- name: Import Pebble tasks
  tags: cert
  when: system.devel and devel.acme_server == 'pebble'
  import_tasks: pebble.yml
# Defines generate_cert_from_pebble

- name: Generate the certificate
  tags: cert
  when: is_valid.stdout == "0"
        or (system.devel and devel.acme_server == 'pebble' and generate_cert_from_pebble)
  import_tasks: gencert.yml

# These permissions are needed to avoid problems with the

- name: Set the permissions for certificate directories
  file:
    path: '{{ path }}'
    state: directory
    mode: '0755'
  with_items:
    - '/etc/letsencrypt'
    - '/etc/letsencrypt/archive'
    - '/etc/letsencrypt/live'
    - '/etc/letsencrypt/archive/{{ certificate_fqdn }}'
    - '/etc/letsencrypt/live/{{ certificate_fqdn }}'
  loop_control:
    loop_var: path

# In this direction, we should overwrite the symbolic links,
# in case the certificates have been renewed
# We force the permissions to 755 for dirs and 600 for files
- name: Backup the certificates on your local machine
  when: (system.devel and devel.acme_server == 'staging') or system.keep_certs
  tags: cert,sync
  synchronize:
    mode: pull
    src: /etc/letsencrypt
    dest: '{{ backup_directory }}/certificates/'
    perms: yes
    rsync_opts:
      - '--no-motd'
      - '--exclude=readme.md'
      - '--exclude=renewal-hooks'
      - '--update'
      - '--chmod=D0755,F0600'
